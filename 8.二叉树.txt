每个结点至多有两棵子树，左右子树是不能颠倒的（有序树）


满二叉树：一个高度为h的，且含有2^h-1个结点的二叉树
  特点：只有最后一层有叶子结点
  （2）不存在度为1的结点
  （3）按层序从1开始编号，结点为i的左孩子为2i，右孩子为2i+1，
  结点i的父结点为[i/2]（如果有的话）

  完全二叉树：当且仅当其每个结点都与高度为h的满二叉树中编号为1~n
  的结点一一对应时，称为完全二叉树
  （1）只有最后两层可能有叶子节点
  （2）最多只有一个度为1的结点
  （3）同上
  （4）i<=[n/2]为分支节点，i>[n/2]为叶子节点


  二叉排序树：一个二叉树或者空二叉树。
  （1）左子树上的所有结点的关键字均小于根节点的关键字
  （2）右子树上的所有结点的关键字均大于根节点的关键字
  左子树和右子树又各是一棵二叉排序树


  平衡二叉树：树上任一结点的左子树和右子树的深度之差不超过1



  常考点：
  （1）设非空二叉树中度为0，1，2的结点个数分别为n0，n1，n2，则n0=n2+1
  （叶子结点比二分支结点多一个）
  （2）二叉树的第i层最多有2^(i-1)个结点（i>=1）
  m叉树第i层至多有m^(i-1)个结点（i>=1）







  二叉树的舒徐存储
  #define MaxSize 100
  struct TreeNode{
    int value;   //结点中的数据元素
    bool isEmpty;   //结点是否为空
  }

  //定义一个长度为MaxSize的数组t，按照从上到下，从左到右的顺序存储，

  TreeNode t[MaxSize];
  for(int i = 0;i<MaxSize;i++){
    t[i].isEmpty = true;
  }



  几个重要常考的基本操作
  i的左孩子：2i
  i的右孩子：2i+1
  i的父结点：i/2
  i所在的层次：log2^(n+1)

  若完全二叉树中有n个结点，则
  判断i是否有左孩子？   2i<=n
  判断i是否有右孩子？   2i+1<=n
  判断i是否是叶子/分支结点？   i>n/2


  链式存储
  typedef struct BiTNode{
    int data;   // 数据域
    struct BiTNode *lchild,*rchild;   //左右孩子指针
  }BiTNode,*BiTree;




  二叉树的先中后序遍历
    ABC
    BAC
    BCA

前序遍历序列：A、D、B、C、E
中序遍历序列：B、D、C、A、E
可以判断出，A一定是根结点
则A左边的为左子树，右边的为右子树

后序遍历序列：E、F、A、H、C、I、G、B、D
中序遍历序列：E、A、F、D、H、C、B、G、I
后序遍历序列中，最后出现的一定是根结点

层序遍历序列：D、A、B、E、F、C、G、H、I
中序遍历序列：E、A、F、D、H、C、B、G、I
层序遍历序列中，第一个出现的一定是根结点
根节点左边的是左子树，右边的是右子树





线索二叉树
















