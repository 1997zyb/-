线性表是具有相同数据类型的n个数据元素的有限序列，
其中n为表长，当n=0时线性表是一个空表，
ai是线性表中的第i个元素线性表中的位序
除第一个元素之外，每个元素有且仅有一个直接前驱；
除最后一个元素之外，每个元素有且仅有一个直接后继

位序是从1开始的
数组下标是从0开始的


线性表基本操作：
  InitList(&L)：初始化表。构造一个空的线性表L，分配内存空间
  DestroyList(&L)：销毁操作。销毁线性表，并释放线性表L所占用的内存空间
  ListInsert(&L,i,e)：插入操作。在表L中的第i个位置插入指定元素e
  ListDelete(&L,i,&e)：删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值
  LocateElem(L,e)：按值查找。在表L中查找具有给定关键字值的元素
  GetElem(L,i)：按位查找。获取表L中第i个位置的元素的值

什么时候要传入引用“&”，对参数的修改结果需要带回来


C语言函数的定义：
<返回值类型>函数名(<参数1类型>参数1,<参数2类型>参数2,<参数3类型>参数3)



顺序表（顺序存储）
      用顺序存储的方式实现线性表
      顺序存储。把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中。
      元素之间的关系由存储单元的邻接关系来体现
      重点：每个数据元素占据的空间一样大
      如何知道一个数据元素的大小
      ：sizeof(数据类型)

      顺序表的实现————（静态分配）

      #define MaxSize 10   //定义最大长度
      typedef struct{
        int data[MaxSize]
        int length
      }SqList

      静态分配：固定的，存储空间是静态的
              顺序表的表长刚开始确定后就无法修改


      顺序表的实现————（动态分配）
      #define InitSIze 10   // 顺序表的初始长度
      typedef struct{
        int *data; // 指示动态分配数组的指针
        int MaxSize; // 顺序表的最大容量
        int length; // 顺序表的当前长度
      }SeqList;
      
      int main(){
        SeqList L; // 声明一个顺序表
        InitList(L); // 初始化顺序表
        IncreateSize(5); //
        return 0;
      }

      void InitList(SeqList,&L){
        // 用malloc函数申请一片连续的内存空间
        L.data = malloc(sizeof(int) * InitSIze)
        L.length = 0;
        L.MaxSize = InitSIze;
      }

      //动态增加数组长度
      void IncreateSize(SeqList,&L,int len){
        int *p = L.data; // p指针和data指针指向同一个位置
        L.data = (int *)malloc(sizeof(int) * (L.MaxSize+len));
        for(int i = 0;i<L.length;i++){
          L.data[i] = p[i]; // 将数据复制到新区域，把之前的数据挪过来
        }
        L.MaxSize = L.MaxSize + len; // 顺序表的最大长度增加len
        free(p) // 释放内存空间
      }

      顺序表的插入和删除
      ListInsert(&L,i,e)：往表L的第i个位置中插入元素e。
      typedef struct{
        int *data; // 指示动态分配数组的指针
        int MaxSize; // 顺序表的最大容量
        int length; // 顺序表的当前长度
      }SeqList;


      顺序表的查找
      GetElem(L,i)：按位查找，获取表L中第i个位置的元素的值

      typedef struct{
        int *data; // 指示动态分配数组的指针
        int MaxSize; // 顺序表的最大容量
        int length; // 顺序表的当前长度
      }SqList;
      int GetElem(SqList L,int i){
        return L.data[i-1]
      }

链表（链式存储）


typedef作为C语言中的关键字，作用是为一种数据类型定义一个新名字，这里的数据类型包括
内部数据类型（int，char等）和自定义的数据类型（struct等）
 typedef unsigned int UINT; 
 使用UINT代替unsigned int

 typedef int* PINT;
 PINT p,p1,p2;这时p,p1,p2都是指针

在C语言中，常量是使用频率很高的一个量。常量是指在程序运行过程中，其值不能被改变的量。常量常使用#define来定义。
#define 宏名 宏值
#define 宏名(参数列表) 表达式
#define PINT int*（只是替换）

结构体（struct）：是一种自定义的数据类型，用于存储不同类型的数据项
这些数据项可以具有不同的数据类型。结构体允许将相关的数据项组合在一起

重点：malloc、free动态申请和释放内存空间
malloc申请一整片的连续的内存空间，
会返回一个指针，需要强制转化为你定义的数据元素类型指针




