队列：只允许在一端进行插入，在另一端删除的线性表
队头
队尾
空队列

先进先出


InitQueue(&Q)：初始化队列，构造一个空队列Q，分配内存空间
DestoryQueue(&Q)：销毁队列。销毁并释放内存空间
EnQueue(&Q,x)：入队。若队列未满，则将x加入使之成为新队尾
DeQueue(&Q,&x)：出队。若队列未空，则删除对头元素，并用x返回 
GetHead(Q,&x)：读对头元素。若队列未空，则将队头元素赋值给x
StockEmpty(S)：判断一个栈S是否为空 

#define MaxSize 10   // 定义队列中元素的最大个数
typedef struct{
  int data[MaxSize];   // 用静态数组存放队列元素
  int font,rear;   // 队头指针和队尾指针
} SqQueue;

// font 指向队头元素
// rear指向队尾元素的后一个位置（下一个应该插入的元素）
void testQueue(){
  SqQueue Q;   //声明一个队列Q
  InitQueue(Q);  //初始化队列
}

void InitQueue(SqQueue &Q){
  Q.front = 0;
  Q.rear = 0;
}

// 判断队列是否为空
bool QueueEmpty(SqQueue Q){
  if(Q.font == Q.rear){
    return true;
  }else {
    return false;
  }
}

// 入队
bool EnQueue(SqQueue &Q, int x){
  if((Q.rear + 1)%MaxSize == Q.font){
    return false; // 队列满了
  }else {
    Q.data[Q.rear] = x; // 将x插入队尾
    Q.rear = (Q.rear + 1)%MaxSize; // 队尾指针后移
    return true;
  }
}

//出栈
bool DeQueue(SqQueue &Q, int &x){
  if(Q.font == Q.rear){
    return false; // 队列为空，报错
  }else {
    x = Q.data[Q.front];
    Q.front = (Q.font + 1)%MaxSize;
    return true;

  }
}
//获取队头指针
bool GetHead(SqQueue Q,int &x){
  if(Q.front == Q.rear){
    return false; // 队列为空，报错
  }else {
    x = Q.data[Q.front];
    return true;
  }
}
// 定义一个size，当size等于MaxSize时，表示此时队满





链式方式





双端队列



